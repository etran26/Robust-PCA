clear; close all;

%% test on the random data

% load random_data;
S = load('random_data.mat');
Lopt = S.Lopt;
Sopt = S.Sopt;
X = S.X;

[r, c] = size(X);
unobserved = isnan(X);
X(unobserved) = 0;
normX = norm(X, 'fro');
lambda = 1 / sqrt(max(r, c));
mu = 10 * lambda;
tol = 1e-6;

L = zeros(r, c);
S = zeros(r, c);
Y = zeros(r, c);

iter = 0;
err = 1e-7;
while err < tol
    iter = iter + 1;
    L = Do(1 / mu, X - S + (1 / mu) * Y);
    S = So(lambda / mu, X - L + (1 / mu) * Y);
    Z = X - L - S;
    Z(unobserved) = 0;
    Y = Y + mu * Z;
    err = norm(Z, 'fro') / normX;
    if (iter == 1) || (mod(iter, 10) == 0) || (err < tol)
            fprintf(1, 'iter: %04d\terr: %f\trank(L): %d\tcard(S): %d\n', ...
                    iter, err, rank(L), nnz(S(~unobserved)));
    end
    
end

% Lopt and Sopt are the optimal low-rank and sparse matrices

% call your solver to obtain (L, S)

fprintf('||L-Lopt||/||Lopt|| = %5.4e\n',norm(L-Lopt,'fro')/norm(Lopt,'fro'));
fprintf('||S-Sopt||/||Sopt|| = %5.4e\n\n',norm(S-Sopt,'fro')/norm(Sopt,'fro'));


%% test on the escalator data

escalator = load('escalator_data.mat');
M = escalator.M;
% load escalator_data;
[m,n,p] = size(M);

X = zeros(m*n,p);
for i = 1:p
    X(:,i) = reshape(M(:,:,i),m*n,1);
end

% call your solver to obtain (L, S)


unobserved = isnan(X);
X(unobserved) = 0;
normX = norm(X, 'fro');
lambda = 1 / sqrt(max((m * n), p));
mu = 10 * lambda;
tol = 1e-6;

L = zeros(m * n, p);
S = zeros(m * n, p);
Y = zeros(m * n, p);

iter = 0;
err = 1e-7;
while err < tol
    iter = iter + 1;
    L = Do(1 / mu, X - S + (1 / mu) * Y);
    S = So(lambda / mu, X - L + (1 / mu) * Y);
    Z = X - L - S;
    Z(unobserved) = 0;
    Y = Y + mu * Z;
    err = norm(Z, 'fro') / normX;
    if (iter == 1) || (mod(iter, 10) == 0) || (err < tol)
            fprintf(1, 'iter: %04d\terr: %f\trank(L): %d\tcard(S): %d\n', ...
                    iter, err, rank(L), nnz(S(~unobserved)));
    end
    
end



% show a few slices

L3D = zeros(size(M)); % 3-d format
S3D = zeros(size(M)); % 3-d format

for i = 1:p
    L3D(:,:,i) = reshape(L(:,i),m,n);
    S3D(:,:,i) = reshape(S(:,i),m,n);
end

fig = figure('papersize',[15,4],'paperposition',[0,0,15,4]);
subplot(1,3,1);
imshow(L3D(:,:,1),[]);
subplot(1,3,2);
imshow(L3D(:,:,100),[]);
subplot(1,3,3);
imshow(L3D(:,:,200),[]);
print(fig,'-dpdf','L3slices');

fig = figure('papersize',[15,4],'paperposition',[0,0,15,4]);
subplot(1,3,1);
imshow(S3D(:,:,1),[]);
subplot(1,3,2);
imshow(S3D(:,:,100),[]);
subplot(1,3,3);
imshow(S3D(:,:,200),[]);
print(fig,'-dpdf','S3slices');


function r = So(tau, X)
    % shrinkage operator
    r = sign(X) .* max(abs(X) - tau, 0);
end

function r = Do(tau, X)
    % shrinkage operator for singular values
    [U, S, V] = svd(X, 'econ');
    r = U*So(tau, S)*V';
end
